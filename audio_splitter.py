import argparse
import os
import subprocess
import sys
import re
import math
import shutil
from pathlib import Path
from tqdm import tqdm

def split_audio_by_size(input_file: str, chunk_size_mb: float = 20.0) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–µ –≤ —Ñ–æ—Ä–º–∞—Ç FLAC
    –∏ –Ω–∞—Ä–µ–∑–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.

    Args:
        input_file (str): –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
        chunk_size_mb (float): –ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö.

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ –ø–æ–ª–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º.
        
    Raises:
        FileNotFoundError: –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
        RuntimeError: –ï—Å–ª–∏ ffmpeg/ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.
    """
    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg –∏ —Ñ–∞–π–ª–∞ ---
    if not shutil.which("ffmpeg") or not shutil.which("ffprobe"):
        raise RuntimeError("–û—à–∏–±–∫–∞: FFmpeg –∏/–∏–ª–∏ FFprobe –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.")

    source_path = Path(input_file)
    if not source_path.is_file():
        raise FileNotFoundError(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {input_file}")

    # --- 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ---
    output_dir = source_path.parent / f"{source_path.stem}_chunks"
    output_dir.mkdir(exist_ok=True)
    print(f"üóÇÔ∏è  –ß–∞—Å—Ç–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

    # --- 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ ---
    try:
        duration_cmd = [
            "ffprobe",
            "-v", "error",
            "-show_entries", "format=duration",
            "-of", "default=noprint_wrappers=1:nokey=1",
            str(source_path)
        ]
        result = subprocess.run(duration_cmd, capture_output=True, text=True, check=True)
        total_duration = float(result.stdout.strip())
    except (subprocess.CalledProcessError, ValueError) as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ –∏–∑ —Ñ–∞–π–ª–∞: {e.stderr or e}")

    # --- 4. –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ ---
    # –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∫–æ–Ω–µ—á–Ω–æ–≥–æ FLAC —Ñ–∞–π–ª–∞.
    # –°–æ–∑–¥–∞–¥–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π FLAC —Ñ–∞–π–ª, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±–∞–π—Ç/—Å–µ–∫—É–Ω–¥–∞.
    temp_flac_path = output_dir / f"temp_{source_path.stem}.flac"
    
    print("‚è≥ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –≤ –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π FLAC
        analyze_cmd = [
            "ffmpeg",
            "-y",  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞
            "-i", str(source_path),
            "-map", "0:a",
            "-ac", "1",
            "-ar", "16000",
            "-c:a", "flac",
            str(temp_flac_path)
        ]
        subprocess.run(analyze_cmd, check=True, capture_output=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –µ–≥–æ —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        temp_file_size_bytes = temp_flac_path.stat().st_size
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        bytes_per_second = temp_file_size_bytes / total_duration
        chunk_size_bytes = chunk_size_mb * 1024 * 1024
        segment_duration = math.floor(chunk_size_bytes / bytes_per_second)

        if segment_duration <= 0:
            segment_duration = 60 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞: ~{segment_duration} —Å–µ–∫.")

    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—É–¥–∏–æ: {e.stderr.decode('utf-8')}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if temp_flac_path.exists():
            temp_flac_path.unlink()

    # --- 5. –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Ä–µ–∑–∫–∏ ---
    output_pattern = output_dir / "part_%03d.flac"
    
    split_cmd = [
        "ffmpeg",
        "-i", str(source_path),
        "-map", "0:a",        # –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        "-ac", "1",           # –ú–æ–Ω–æ
        "-ar", "16000",       # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ 16000 –ì—Ü
        "-c:a", "flac",       # –ö–æ–¥–µ–∫ FLAC
        "-f", "segment",      # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é
        "-segment_time", str(segment_duration),
        "-reset_timestamps", "1",
        str(output_pattern)
    ]

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—Ä–µ–∑–∫–∏ —Ñ–∞–π–ª–∞...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Popen –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = subprocess.Popen(split_cmd, stderr=subprocess.PIPE, stdout=subprocess.DEVNULL, text=True, encoding='utf-8')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ tqdm
        with tqdm(total=total_duration, unit='s', desc="–ü—Ä–æ–≥—Ä–µ—Å—Å", bar_format="{l_bar}{bar}| {n:.2f}/{total:.2f}s") as pbar:
            previous_time = 0
            for line in process.stderr:
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –≤—ã–≤–æ–¥–µ ffmpeg
                match = re.search(r"time=(\d{2}):(\d{2}):(\d{2})\.(\d{2})", line)
                if match:
                    h, m, s, ms = map(int, match.groups())
                    current_time = h * 3600 + m * 60 + s + ms / 100
                    pbar.update(current_time - previous_time)
                    previous_time = current_time
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞
            if pbar.n < total_duration:
                 pbar.update(total_duration - pbar.n)


        process.wait()
        if process.returncode != 0:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, stderr —É–∂–µ –±—ã–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, –Ω—É–∂–Ω–æ –µ–≥–æ –∫–∞–∫-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç –≤ –ª–æ–≥–∞—Ö –≤—ã—à–µ
            raise RuntimeError(f"FFmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ {process.returncode}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ –≤—ã—à–µ.")

    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –Ω–∞—Ä–µ–∑–∫–∏: {e}", file=sys.stderr)
        return []

    # --- 6. –í–æ–∑–≤—Ä–∞—Ç —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ ---
    chunk_files = sorted([str(f) for f in output_dir.glob("part_*.flac")])
    print(f"\n‚úÖ –ù–∞—Ä–µ–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(chunk_files)}")
    return chunk_files


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –∏–∑ —Ñ–∞–π–ª–∞ –∏ –¥–µ–ª–∏—Ç –µ–µ –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "input_file",
        type=str,
        help="–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É."
    )
    parser.add_argument(
        "-s", "--size",
        type=float,
        default=20.0,
        help="–†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö (–ú–ë). –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é: 20."
    )

    args = parser.parse_args()

    try:
        created_files = split_audio_by_size(args.input_file, args.size)
        if created_files:
            print("\n–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            for f in created_files:
                print(f"  - {f}")
    except (FileNotFoundError, RuntimeError) as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
